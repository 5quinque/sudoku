{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/engine.js","webpack:///./src/errorCheck.js","webpack:///./src/input.js","webpack:///./src/main.js","webpack:///./src/solver.js","webpack:///./src/sudoku.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;ACnEA;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,2BAA2B;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA,uBAAuB,KAAK;AAC5B;AACA;;AAEA,iBAAiB,cAAc;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;;AAE3B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpRA;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC,2CAA2C,EAAE,MAAM,EAAE;;AAErD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,OAAO;AACtC,+BAA+B,OAAO;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC,2BAA2B,OAAO;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AC3IA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B,iDAAiD,OAAO,MAAM,EAAE;AAChE,oDAAoD,EAAE,GAAG,OAAO;AAChE;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC,uDAAuD,EAAE,MAAM,EAAE;AACjE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;ACvHA;AAAA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;ACLA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACrFA;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B;AACA,qBAAqB,QAAQ;AAC7B,qDAAqD,EAAE,MAAM,EAAE;AAC/D;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA,+CAA+C,QAAQ,MAAM,QAAQ;AACrE;AACA,oDAAoD,UAAU;AAC9D;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","// @format\n\n'use strict';\n\n// It's called engine, because it drives it all\nclass Engine {\n  constructor(sudoku) {\n    this.sudoku = sudoku;\n  }\n\n  generateNewPuzzle() {\n    let startingPuzzle, solvedPuzzle, finalPuzzle;\n    let uniquePuzzle = false;\n\n    while (!solvedPuzzle) {\n      startingPuzzle = this.createPuzzleTemplate();\n      solvedPuzzle = this.solvePuzzle(startingPuzzle);\n    }\n\n    finalPuzzle = solvedPuzzle.slice(0);\n\n    uniquePuzzle = this.shrinkPuzzle(finalPuzzle, solvedPuzzle);\n\n    while (!uniquePuzzle) {\n      finalPuzzle = this.generateNewPuzzle();\n      uniquePuzzle = true;\n    }\n\n    //this.consoleLogPuzzle(finalPuzzle);\n    return finalPuzzle;\n  }\n\n  shrinkPuzzle(finalPuzzle, solvedPuzzle) {\n    let tempSolved;\n    for (let i = 0; i < 45; i++) {\n      this.removeTile(finalPuzzle);\n    }\n\n    tempSolved = this.solvePuzzle(finalPuzzle);\n\n    return this.compareArrays(tempSolved, solvedPuzzle);\n  }\n\n  compareArrays(x, y) {\n    for (let i = 0; i < x.length; i++) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  removeTile(finalPuzzle) {\n    let removeIndex;\n    do removeIndex = Math.floor(Math.random() * 80);\n    while (finalPuzzle[removeIndex] == 0);\n    finalPuzzle[removeIndex] = 0;\n  }\n\n  solvePuzzle(startingPuzzle) {\n    let movingForward = true;\n    let loops = 0;\n    let validMoves = this.createValidMoves();\n    let tempPuzzle = startingPuzzle.slice(0);\n\n    for (let i = 0; i < startingPuzzle.length; i++) {\n      if (loops++ > 250) return false;\n\n      // Skip default tiles\n      if (startingPuzzle[i] != 0 && !movingForward) {\n        i -= 2;\n        tempPuzzle = tempPuzzle.map(this.clearAhead, [startingPuzzle, i + 2]);\n        continue;\n      }\n      if (startingPuzzle[i] != 0) continue;\n\n      movingForward = this.incrementTile(tempPuzzle, i, validMoves);\n\n      if (!movingForward) {\n        // Move back two spaces\n        i -= 2;\n        tempPuzzle = tempPuzzle.map(this.clearAhead, [startingPuzzle, i + 2]);\n      }\n    }\n\n    return tempPuzzle;\n  }\n\n  createValidMoves() {\n    let validMoves = {};\n    for (let i = 0; i < 81; i++) validMoves[i] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    return validMoves;\n  }\n\n  consoleLogPuzzle(tempPuzzle) {\n    let line = '';\n    for (let i = 0; i < tempPuzzle.length + 1; i++) {\n      if (i % 9 == 0) {\n        console.log(`${line}`);\n        line = '';\n      }\n\n      line += `${tempPuzzle[i]} `;\n    }\n  }\n\n  incrementTile(tempPuzzle, i, validMoves) {\n    let validIndex;\n\n    do {\n      validIndex = Math.floor(Math.random() * validMoves[i].length);\n      tempPuzzle[i] = validMoves[i][validIndex];\n      validMoves[i].splice(validIndex, 1);\n    } while (!this.isStarValid(i, tempPuzzle) && validMoves[i].length > 0);\n\n    // If we have exhausted the valid moves and we're still not valid\n    if (!this.isStarValid(i, tempPuzzle)) {\n      tempPuzzle[i] = 0;\n      validMoves[i] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n      return false;\n    }\n\n    return true;\n  }\n\n  createPuzzleTemplate() {\n    let p = [];\n    const self = this;\n    // Create array full of '0's\n    for (let i = 0; i < 81; i++) p[i] = 0;\n\n    // Fill our the first 3x3 box (First row, first column)\n    [0, 1, 2, 9, 10, 11, 18, 19, 20].forEach(function(i) {\n      p[i] = self.getRandomInt(p);\n    });\n\n    // Fill the second 3x3 box (Second row, second column)\n    [30, 31, 32, 39, 40, 41, 48, 49, 50].forEach(function(i) {\n      p[i] = self.getRandomInt(p.slice(30, 50));\n    });\n\n    // Fill our final 3x3 box (Third row, third column)\n    [60, 61, 62, 69, 70, 71, 78, 79, 80].forEach(function(i) {\n      p[i] = self.getRandomInt(p.slice(60, 80));\n    });\n\n    return p;\n  }\n\n  getRandomInt(p) {\n    let i;\n    do i = Math.floor(Math.random() * 9) + 1;\n    while (p.indexOf(i) != -1);\n    return i;\n  }\n\n  clearAhead(element, index) {\n    const startingPuzzle = this[0];\n    const greaterThan = this[1];\n\n    if (index < greaterThan) return element;\n\n    return startingPuzzle[index];\n  }\n\n  isStarValid(i, tempPuzzle) {\n    // Get the row and column index\n    const rowIndex = Math.floor(i / 9) + 1;\n    const colIndex = i % 9 + 1;\n\n    // Using the above values, calculate the square index\n    const squareIndex = this.getSquareIndex(rowIndex, colIndex);\n\n    // Filter the row, column and 3x3 square from our puzzle array\n    let rowValues = tempPuzzle.filter(this.isRow, rowIndex);\n    let colValues = tempPuzzle.filter(this.isCol, colIndex);\n    let squareValues = this.getSquare(squareIndex, tempPuzzle);\n\n    // Remove all '0's\n    rowValues = rowValues.filter(this.removeZero);\n    colValues = colValues.filter(this.removeZero);\n    squareValues = squareValues.filter(this.removeZero);\n\n    // Check if we have any duplicates\n    if (\n      this.hasDuplicateValue(rowValues) ||\n      this.hasDuplicateValue(colValues) ||\n      this.hasDuplicateValue(squareValues)\n    )\n      return false;\n    return true;\n  }\n\n  // Start of our filter functions\n  removeZero(element) {\n    return element !== 0;\n  }\n  isRow(element, index) {\n    return Math.floor(index / 9) + 1 == this;\n  }\n  isCol(element, index) {\n    return index % 9 + 1 == this;\n  }\n  // End of our filter function\n\n  getSquare(i, puzzleArray) {\n    const x = this.getStartingCol(i);\n    const y = this.getStartingRow(i);\n    let index;\n    let squareArray = [];\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        index = j * 9 + i;\n        squareArray.push(puzzleArray[index]);\n      }\n    }\n\n    return squareArray;\n  }\n\n  /**\n   *\n   * @description Get the starting column of a given square\n   *  E.g, 1 = 1, 2 = 4, 3 =  7, 4 = 1\n   * @returns int x\n   */\n  getStartingCol(i) {\n    let x;\n    switch (i % 3) {\n      case 1:\n        x = 0;\n        break;\n      case 2:\n        x = 3;\n        break;\n      case 0:\n        x = 6;\n        break;\n    }\n    return x;\n  }\n\n  /**\n   *\n   * @description Get the starting row of a given square\n   * @returns int y\n   */\n  getStartingRow(i) {\n    let y;\n    if (i < 4) {\n      y = 0;\n    } else if (i < 7) {\n      y = 3;\n    } else {\n      y = 6;\n    }\n    return y;\n  }\n\n  hasDuplicateValue(unit) {\n    unit.sort();\n    for (let i = 0; i < unit.length; i++)\n      if (unit[i] === unit[i + 1]) return true;\n    return false;\n  }\n\n  getSquareIndex(row, col) {\n    const tempRow = (Math.ceil(row / 3) - 1) * 3;\n    const tempCol = Math.ceil(col / 3);\n    const square = tempRow + tempCol;\n\n    return square;\n  }\n}\n\nexport default Engine;\n","// @format\n'use strict';\n\nclass Error {\n  constructor(sudoku) {\n    this.sudoku = sudoku;\n  }\n\n  /**\n   *\n   * @description Check if a row is valid for given tile class\n   * @returns {undefined}\n   */\n  isRowValid(elClass) {\n    let isValid = true;\n    let values = [];\n    const matches = document.querySelectorAll(elClass);\n\n    for (let el of matches) {\n      if (!el.childNodes[0].value) continue;\n      if (values.includes(el.childNodes[0].value)) {\n        isValid = false;\n        break;\n      }\n      values.push(el.childNodes[0].value);\n    }\n\n    return isValid;\n  }\n\n  isSquareValid(i) {\n    let el;\n    let values = [];\n\n    // Get starting col\n    let x = this.sudoku.engine.getStartingCol(i) + 1;\n    // Get starting row\n    let y = this.sudoku.engine.getStartingRow(i) + 1;\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        el = document.querySelector(`.col${i}.row${j}`);\n\n        if (!el.childNodes[0].value) continue;\n        if (values.includes(el.childNodes[0].value)) return false;\n\n        values.push(el.childNodes[0].value);\n      }\n    }\n    return true;\n  }\n\n  isBoxProblemSquare(i, value) {\n    let el;\n    let values = [];\n\n    // Get starting col\n    let x = this.sudoku.engine.getStartingCol(i) + 1;\n    // Get starting row\n    let y = this.sudoku.engine.getStartingRow(i) + 1;\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        el = document.querySelector('.col' + i + '.row' + j);\n\n        if (!el.childNodes[0].value) continue;\n        if (\n          values.includes(el.childNodes[0].value) &&\n          el.childNodes[0].value == value\n        )\n          return true;\n\n        values.push(el.childNodes[0].value);\n      }\n    }\n    return false;\n  }\n\n  isBoxProblemRow(elClass, value) {\n    let values = [];\n    const matches = document.querySelectorAll(elClass);\n\n    for (let el of matches) {\n      if (!el.childNodes[0].value) continue;\n      if (\n        values.includes(el.childNodes[0].value) &&\n        el.childNodes[0].value == value\n      )\n        return true;\n\n      values.push(el.childNodes[0].value);\n    }\n\n    return false;\n  }\n\n  /**\n   *\n   * @description Does the given tile have a duplicate\n   * @returns {undefined}\n   */\n  isTileProblem(classList, value) {\n    const row = /row(\\d)/.exec(classList);\n    const col = /col(\\d)/.exec(classList);\n    const square = this.sudoku.engine.getSquareIndex(row[1], col[1]);\n\n    return (\n      this.isBoxProblemRow(`.${row[0]}`, value) ||\n      this.isBoxProblemRow(`.${col[0]}`, value) ||\n      this.isBoxProblemSquare(square, value)\n    );\n  }\n\n  /**\n   *\n   * @description Check row, col and 3x3 square for given tile\n   * @returns {undefined}\n   */\n  isValidStar(classList) {\n    const row = /row(\\d)/.exec(classList);\n    const col = /col(\\d)/.exec(classList);\n    const square = this.sudoku.engine.getSquareIndex(row[1], col[1]);\n\n    return !(\n      !this.isRowValid(`.${row[0]}`) ||\n      !this.isRowValid(`.${col[0]}`) ||\n      !this.isSquareValid(square)\n    );\n  }\n\n  applyErrorClass(element) {\n    if (this.isTileProblem(element.classList, element.childNodes[0].value)) {\n      element.classList.add('error');\n    } else {\n      element.classList.remove('error');\n    }\n  }\n}\n\nexport default Error;\n","// @format\n'use strict';\n\nclass Input {\n  constructor(sudoku) {\n    this.sudoku = sudoku;\n\n    this.addButtonListeners();\n  }\n\n  addInputListeners() {\n    const self = this;\n    const inputs = document.querySelectorAll(\n      '.ninexnine_wrapper > div > input',\n    );\n\n    // Loop through all inputs adding event listeners\n    for (let i = 0; i < inputs.length; i++) {\n      inputs[i].addEventListener('input', function() {\n        // Everytime the value is updated check if it's valid\n        self.checkValid(this);\n      });\n      inputs[i].addEventListener('focus', function() {\n        // Store the box value for comparison when it's updated\n        self.storeBoxValue(this);\n      });\n    }\n  }\n\n  deleteInputListeners() {\n    const self = this;\n    const inputs = document.querySelectorAll(\n      '.ninexnine_wrapper > div > input',\n    );\n\n    // Loop through all inputs adding event listeners\n    for (let i = 0; i < inputs.length; i++) {\n      inputs[i].removeEventListener('input', function() {\n        // Everytime the value is updated check if it's valid\n        self.checkValid(this);\n      });\n      inputs[i].removeEventListener('focus', function() {\n        // Store the box value for comparison when it's updated\n        self.storeBoxValue(this);\n      });\n    }\n  }\n\n  addButtonListeners() {\n    const self = this;\n    let buttonRunning = false;\n\n    // Add event listeners for buttons\n    let solveEl = document.getElementsByClassName('btn-solve')[0];\n    solveEl.addEventListener('click', function() {\n      if (!buttonRunning) {\n        buttonRunning = true;\n        self.sudoku.solver.solve().then(v => {\n          buttonRunning = false;\n        });\n      }\n    });\n\n    let newEl = document.getElementsByClassName('btn-new')[0];\n    newEl.addEventListener('click', function() {\n      if (!buttonRunning) {\n        buttonRunning = true;\n        self.sudoku.newPuzzle();\n        buttonRunning = false;\n      }\n    });\n  }\n\n  // move to error.js?\n  checkValid(el) {\n    let tempRow, tempCol;\n    let tempEl, rowEl, colEl;\n\n    const row = /row(\\d)/.exec(el.parentElement.classList);\n    const col = /col(\\d)/.exec(el.parentElement.classList);\n\n    const square = this.sudoku.engine.getSquareIndex(row[1], col[1]);\n\n    // Check rows/cols if valid and apply/remove .error classes\n    for (let i = 1; i <= 9; i++) {\n      rowEl = document.getElementsByClassName(`${row[0]} col${i}`)[0];\n      colEl = document.getElementsByClassName(`row${i} ${col[0]}`)[0];\n      this.sudoku.error.applyErrorClass(rowEl);\n      this.sudoku.error.applyErrorClass(colEl);\n    }\n\n    // Check if square is valid and apply/remove .error classes\n    const x = this.sudoku.engine.getStartingCol(square) + 1;\n    const y = this.sudoku.engine.getStartingRow(square) + 1;\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        tempEl = document.getElementsByClassName(`row${j} col${i}`)[0];\n        this.sudoku.error.applyErrorClass(tempEl);\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @description Store the value of of box, for future comparison\n   * @returns {undefined}\n   */\n  storeBoxValue(el) {\n    const key = el.parentElement.classList[0] + el.parentElement.classList[1];\n\n    if (el.value) {\n      this.sudoku.currentValues[key] = el.value;\n    }\n  }\n}\n\nexport default Input;\n","// @format\n'use strict';\n\nimport Sudoku from './sudoku.js';\n\nvar sud = new Sudoku();\n","// @format\n'use strict';\n\nclass Solver {\n  constructor(sudoku) {\n    this.sudoku = sudoku;\n\n    this.moveForward = true;\n  }\n\n  async solve() {\n    let loops = 0;\n    this.boxes = document.querySelector('.ninexnine_wrapper').childNodes;\n\n    // Clear any user inputted values\n    this.clearAhead(1);\n\n    for (let i = 0; i < 80; i++) {\n      // Skip over 'default' boxes\n      if (this.boxes[i].classList.contains('default') && !this.moveForward) {\n        i -= 2;\n        this.clearAhead(i + 2);\n        continue;\n      }\n      if (this.boxes[i].classList.contains('default')) {\n        continue;\n      }\n\n      await this.slowSolve(i);\n      //this.moveForward = this.incrementTile(this.boxes[i]);\n\n      // If we're not moving forward we're moving back\n      if (!this.moveForward) {\n        i -= 2;\n        this.clearAhead(i + 2);\n      }\n    }\n  }\n\n  // It looks pretty\n  slowSolve(i, x) {\n    let self = this;\n    return new Promise(resolve =>\n      setTimeout(function() {\n        self.moveForward = self.incrementTile(self.boxes[i]);\n\n        resolve();\n      }, 0),\n    );\n  }\n\n  incrementTile(boxEl) {\n    if (parseInt(boxEl.childNodes[0].value)) {\n      boxEl.childNodes[0].value++;\n      if (boxEl.childNodes[0].value > 9) {\n        boxEl.childNodes[0].value = '';\n        return false;\n      }\n    } else {\n      boxEl.childNodes[0].value = 1;\n    }\n\n    while (\n      !this.sudoku.error.isValidStar(boxEl.classList) &&\n      boxEl.childNodes[0].value < 9\n    ) {\n      boxEl.childNodes[0].value++;\n    }\n\n    if (!this.sudoku.error.isValidStar(boxEl.classList)) {\n      boxEl.childNodes[0].value = '';\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  clearAhead(i) {\n    for (; i < 81; i++) {\n      if (this.boxes[i].classList.contains('default')) continue;\n      this.boxes[i].childNodes[0].value = '';\n    }\n  }\n}\n\nexport default Solver;\n","// @format\n'use strict';\n\nimport Error from './errorCheck.js';\nimport Engine from './engine.js';\nimport Input from './input.js';\nimport Solver from './solver.js';\n\nclass Sudoku {\n  constructor() {\n    this.difficulty = false;\n\n    this.test = {};\n\n    this.currentValues = {};\n\n    this.engine = new Engine(this);\n    this.error = new Error(this);\n    this.solver = new Solver(this);\n    this.input = new Input(this);\n\n    this.drawGame();\n\n    this.input.addInputListeners();\n  }\n\n  drawGame() {\n    const puzzle = this.engine.generateNewPuzzle();\n\n    this.drawGrid();\n\n    // add to DOM\n    this.drawPuzzle(puzzle);\n  }\n\n  /**\n   *\n   * @description Add the divs to our grid\n   * @returns {undefined}\n   */\n  drawGrid() {\n    const puzzleWrapper = document.querySelector('.ninexnine_wrapper');\n\n    // Rows\n    for (let i = 1; i <= 9; i++) {\n      // Columns\n      for (let j = 1; j <= 9; j++) {\n        puzzleWrapper.innerHTML += `<div class=\"row${i} col${j}\"></div>`;\n      }\n    }\n  }\n\n  drawPuzzle(puzzle) {\n    let col, row;\n\n    for (let i = 0; i < 81; i++) {\n      col = i % 9;\n      row = Math.floor(i / 9);\n\n      const el = document.querySelector(`.col${col + 1}.row${row + 1}`);\n      if (puzzle[i]) {\n        el.innerHTML = `<input type=\"text\" value=\"${puzzle[i]}\" disabled>`;\n        el.classList.add('default');\n      } else {\n        el.innerHTML = '<input type=\"text\">';\n      }\n    }\n  }\n\n  async newPuzzle() {\n    const puzzleWrapper = document.querySelector('.ninexnine_wrapper');\n    puzzleWrapper.innerHTML = '';\n\n    this.input.deleteInputListeners();\n    this.drawGame();\n    this.input.addInputListeners();\n  }\n}\n\nexport default Sudoku;\n"],"sourceRoot":""}