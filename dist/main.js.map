{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/errorCheck.js","webpack:///./src/errorCheckArray.js","webpack:///./src/input.js","webpack:///./src/main.js","webpack:///./src/solver.js","webpack:///./src/sudoku.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;ACnEA;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;AChNA;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;AChNA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,iDAAiD,OAAO,MAAM,EAAE;AAChE,oDAAoD,EAAE,GAAG,OAAO;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC,uDAAuD,EAAE,MAAM,EAAE;AACjE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;ACnFA;AAAA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;ACLA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,MAAM,QAAQ,EAAE,eAAe,MAAM;AACpE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,MAAM,QAAQ,EAAE,eAAe,MAAM;AACpE;AACA;AACA;AACA;;AAEA,gCAAgC,MAAM;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AC/GA;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,QAAQ;;AAE3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,WAAW;AAC9B,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","// @format\n'use strict';\n\nclass Error {\n  constructor(sudoku) {\n    this.sudoku = sudoku;\n  }\n\n  /**\n   *\n   * @description Check row, col and 3x3 square for given tile\n   * @returns {undefined}\n   */\n  isValidStar(classList) {\n    let isValid = true;\n\n    const row = /row(\\d)/.exec(classList);\n    const col = /col(\\d)/.exec(classList);\n    const square = this.sudoku.getSquareIndex(classList);\n\n    if (\n      !this.isRowValid('.' + row[0]) ||\n      !this.isRowValid('.' + col[0]) ||\n      !this.isSquareValid(square)\n    )\n      isValid = false;\n\n    return isValid;\n  }\n\n  /**\n   *\n   * @description Check if a row is valid for given tile class\n   * @returns {undefined}\n   */\n  isRowValid(elClass) {\n    let isValid = true;\n    let values = [];\n    const matches = document.querySelectorAll(elClass);\n\n    for (let el of matches) {\n      if (!el.childNodes[0].value) continue;\n      if (values.includes(el.childNodes[0].value)) {\n        isValid = false;\n        break;\n      }\n      values.push(el.childNodes[0].value);\n    }\n\n    return isValid;\n  }\n\n  isSquareValid(i) {\n    let x, y;\n    let isValid = true;\n    let values = [];\n\n    // Get starting col\n    x = this.sudoku.getStartingCol(i);\n    // Get starting row\n    y = this.sudoku.getStartingRow(i);\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        let el = document.querySelector('.col' + i + '.row' + j);\n        if (!el.childNodes[0].value) continue;\n        if (values.includes(el.childNodes[0].value)) {\n          isValid = false;\n          break;\n        }\n        values.push(el.childNodes[0].value);\n      }\n    }\n    return isValid;\n  }\n\n  isBoxProbemSquare(i, value) {\n    let x, y;\n    let isProblem = false;\n    let values = [];\n\n    // Get starting col\n    x = this.sudoku.getStartingCol(i);\n    // Get starting row\n    y = this.sudoku.getStartingRow(i);\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        let el = document.querySelector('.col' + i + '.row' + j);\n        if (!el.childNodes[0].value) continue;\n        if (values.includes(el.childNodes[0].value)) {\n          if (el.childNodes[0].value == value) {\n            isProblem = true;\n            break;\n          }\n        }\n        values.push(el.childNodes[0].value);\n      }\n    }\n    return isProblem;\n  }\n\n  isBoxProblemRow(elClass, value) {\n    let isProblem = false;\n    let values = [];\n    const matches = document.querySelectorAll(elClass);\n\n    for (let el of matches) {\n      if (!el.childNodes[0].value) continue;\n      if (values.includes(el.childNodes[0].value)) {\n        if (el.childNodes[0].value == value) {\n          isProblem = true;\n          break;\n        }\n      }\n      values.push(el.childNodes[0].value);\n    }\n\n    return isProblem;\n  }\n\n  /**\n   *\n   * @description Is the given box an incorrect invalid\n   * @returns {undefined}\n   */\n  isBoxProblem(classList, value) {\n    let isProblem = false;\n\n    const row = /row(\\d)/.exec(classList);\n    const col = /col(\\d)/.exec(classList);\n    const square = this.sudoku.getSquareIndex(classList);\n\n    if (\n      this.isBoxProblemRow('.' + row[0], value) ||\n      this.isBoxProblemRow('.' + col[0], value) ||\n      this.isBoxProbemSquare(square, value)\n    )\n      isProblem = true;\n\n    return isProblem;\n  }\n\n  applyErrorClass(element) {\n    if (this.isBoxProblem(element.classList, element.childNodes[0].value)) {\n      element.classList.add('error');\n    } else {\n      element.classList.remove('error');\n    }\n  }\n\n  /**\n   *\n   * @description Remove 'error' class from valid boxes on given line\n   * @returns {undefined}\n   */\n  clearLine(rc, x, val) {\n    const matches = document.querySelectorAll('.' + rc + x);\n\n    for (let el of matches) {\n      if (el.childNodes[0].value == val) {\n        // Check if removal is valid..\n        if (this.isValidStar(el.classList)) {\n          el.classList.remove('error');\n          //console.log(\"Valid square, removing error class\", el.classList);\n        } else {\n          console.log('Still an error, not removing error class', el.classList);\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @description Remove 'error' calss from valid boxes on given square\n   * @returns {undefined}\n   */\n  clearSquare(i, val) {\n    let x, y;\n\n    console.log('Clearing square');\n\n    // Get starting col\n    x = this.sudoku.getStartingCol(i);\n    // Get starting row\n    y = this.sudoku.getStartingRow(i);\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        let el = document.querySelector('.col' + i + '.row' + j);\n        if (el.childNodes[0].value == val && this.isValidStar(el.classList))\n          el.classList.remove('error');\n      }\n    }\n  }\n\n  /**\n   * [UNUSED]\n   * @description Remove 'error' class from all divs in the grid\n   * @returns {undefined}\n   */\n  clearErrors() {\n    const tiles = document.querySelectorAll('.ninexnine_wrapper > *');\n\n    for (let el of tiles) el.classList.remove('error');\n  }\n}\n\nexport default Error;\n","// @format\n'use strict';\n\nclass ErrorArray {\n  constructor(sudoku) {\n    this.sudoku = sudoku;\n  }\n\n  /**\n   *\n   * @description Check row, col and 3x3 square for given tile\n   * @returns {undefined}\n   */\n  isValidStar(tilePos) {\n    let isValid = true;\n\n    const row = /row(\\d)/.exec(classList);\n    const col = /col(\\d)/.exec(classList);\n    const square = this.sudoku.getSquareIndex(classList);\n\n    if (\n      !this.isRowValid('.' + row[0]) ||\n      !this.isRowValid('.' + col[0]) ||\n      !this.isSquareValid(square)\n    )\n      isValid = false;\n\n    return isValid;\n  }\n\n  /**\n   *\n   * @description Check if a row is valid for given tile class\n   * @returns {undefined}\n   */\n  isRowValid(elClass) {\n    let isValid = true;\n    let values = [];\n    const matches = document.querySelectorAll(elClass);\n\n    for (let el of matches) {\n      if (!el.childNodes[0].value) continue;\n      if (values.includes(el.childNodes[0].value)) {\n        isValid = false;\n        break;\n      }\n      values.push(el.childNodes[0].value);\n    }\n\n    return isValid;\n  }\n\n  isSquareValid(i) {\n    let x, y;\n    let isValid = true;\n    let values = [];\n\n    // Get starting col\n    x = this.sudoku.getStartingCol(i);\n    // Get starting row\n    y = this.sudoku.getStartingRow(i);\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        let el = document.querySelector('.col' + i + '.row' + j);\n        if (!el.childNodes[0].value) continue;\n        if (values.includes(el.childNodes[0].value)) {\n          isValid = false;\n          break;\n        }\n        values.push(el.childNodes[0].value);\n      }\n    }\n    return isValid;\n  }\n\n  isBoxProbemSquare(i, value) {\n    let x, y;\n    let isProblem = false;\n    let values = [];\n\n    // Get starting col\n    x = this.sudoku.getStartingCol(i);\n    // Get starting row\n    y = this.sudoku.getStartingRow(i);\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        let el = document.querySelector('.col' + i + '.row' + j);\n        if (!el.childNodes[0].value) continue;\n        if (values.includes(el.childNodes[0].value)) {\n          if (el.childNodes[0].value == value) {\n            isProblem = true;\n            break;\n          }\n        }\n        values.push(el.childNodes[0].value);\n      }\n    }\n    return isProblem;\n  }\n\n  isBoxProblemRow(elClass, value) {\n    let isProblem = false;\n    let values = [];\n    const matches = document.querySelectorAll(elClass);\n\n    for (let el of matches) {\n      if (!el.childNodes[0].value) continue;\n      if (values.includes(el.childNodes[0].value)) {\n        if (el.childNodes[0].value == value) {\n          isProblem = true;\n          break;\n        }\n      }\n      values.push(el.childNodes[0].value);\n    }\n\n    return isProblem;\n  }\n\n  /**\n   *\n   * @description Is the given box an incorrect invalid\n   * @returns {undefined}\n   */\n  isBoxProblem(classList, value) {\n    let isProblem = false;\n\n    const row = /row(\\d)/.exec(classList);\n    const col = /col(\\d)/.exec(classList);\n    const square = this.sudoku.getSquareIndex(classList);\n\n    if (\n      this.isBoxProblemRow('.' + row[0], value) ||\n      this.isBoxProblemRow('.' + col[0], value) ||\n      this.isBoxProbemSquare(square, value)\n    )\n      isProblem = true;\n\n    return isProblem;\n  }\n\n  applyErrorClass(element) {\n    if (this.isBoxProblem(element.classList, element.childNodes[0].value)) {\n      element.classList.add('error');\n    } else {\n      element.classList.remove('error');\n    }\n  }\n\n  /**\n   *\n   * @description Remove 'error' class from valid boxes on given line\n   * @returns {undefined}\n   */\n  clearLine(rc, x, val) {\n    const matches = document.querySelectorAll('.' + rc + x);\n\n    for (let el of matches) {\n      if (el.childNodes[0].value == val) {\n        // Check if removal is valid..\n        if (this.isValidStar(el.classList)) {\n          el.classList.remove('error');\n          //console.log(\"Valid square, removing error class\", el.classList);\n        } else {\n          console.log('Still an error, not removing error class', el.classList);\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @description Remove 'error' calss from valid boxes on given square\n   * @returns {undefined}\n   */\n  clearSquare(i, val) {\n    let x, y;\n\n    console.log('Clearing square');\n\n    // Get starting col\n    x = this.sudoku.getStartingCol(i);\n    // Get starting row\n    y = this.sudoku.getStartingRow(i);\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        let el = document.querySelector('.col' + i + '.row' + j);\n        if (el.childNodes[0].value == val && this.isValidStar(el.classList))\n          el.classList.remove('error');\n      }\n    }\n  }\n\n  /**\n   * [UNUSED]\n   * @description Remove 'error' class from all divs in the grid\n   * @returns {undefined}\n   */\n  clearErrors() {\n    const tiles = document.querySelectorAll('.ninexnine_wrapper > *');\n\n    for (let el of tiles) el.classList.remove('error');\n  }\n}\n\nexport default ErrorArray;\n","// @format\n'use strict';\n\nclass Input {\n  constructor(sudoku) {\n    this.sudoku = sudoku;\n\n    this.addInputListeners();\n  }\n\n  addInputListeners() {\n    const self = this;\n    const inputs = document.querySelectorAll(\n      '.ninexnine_wrapper > div > input',\n    );\n\n    // Loop through all inputs adding event listeners\n    for (let i = 0; i < inputs.length; i++) {\n      inputs[i].addEventListener('input', function() {\n        // Everytime the value is updated check if it's valid\n        self.checkValid(this);\n      });\n      inputs[i].addEventListener('focus', function() {\n        // Store the box value for comparison when it's updated\n        self.storeBoxValue(this);\n      });\n    }\n\n    // Add event listeners for buttons\n    let solveEl = document.getElementsByClassName('btn-solve')[0];\n    solveEl.addEventListener('click', function() {\n      self.sudoku.solver.solve();\n    });\n\n    let newEl = document.getElementsByClassName('btn-new')[0];\n    newEl.addEventListener('click', function() {\n      self.sudoku.newPuzzle();\n    });\n  }\n\n  //\n  checkValid(el) {\n    let tempRow, tempCol;\n    let tempEl, rowEl, colEl;\n    const square = this.sudoku.getSquareIndex(el.parentElement.classList.value);\n\n    // Check rows/cols if valid and apply/remove .error classes\n    const row = /row(\\d)/.exec(el.parentElement.classList);\n    const col = /col(\\d)/.exec(el.parentElement.classList);\n    for (let i = 1; i <= 9; i++) {\n      rowEl = document.getElementsByClassName(`${row[0]} col${i}`)[0];\n      colEl = document.getElementsByClassName(`row${i} ${col[0]}`)[0];\n      this.sudoku.error.applyErrorClass(rowEl);\n      this.sudoku.error.applyErrorClass(colEl);\n    }\n\n    // Check if square is valid and apply/remove .error classes\n    const x = this.sudoku.getStartingCol(square);\n    const y = this.sudoku.getStartingRow(square);\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        tempEl = document.getElementsByClassName(`row${j} col${i}`)[0];\n        this.sudoku.error.applyErrorClass(tempEl);\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @description Store the value of of box, for future comparison\n   * @returns {undefined}\n   */\n  storeBoxValue(el) {\n    const key = el.parentElement.classList[0] + el.parentElement.classList[1];\n\n    if (el.value) {\n      this.sudoku.currentValues[key] = el.value;\n    }\n  }\n}\n\nexport default Input;\n","// @format\n'use strict';\n\nimport Sudoku from './sudoku.js';\n\nvar sud = new Sudoku();\n","// @format\n'use strict';\n\nclass Solver {\n  constructor(sudoku) {\n    this.sudoku = sudoku;\n\n    this.moveForward = true;\n  }\n\n  async solve() {\n    let loops = 0;\n    this.boxes = document.querySelector('.ninexnine_wrapper').childNodes;\n\n    // Clear any user inputted values\n    this.clearAhead(0);\n\n    for (let i = 1; i < 82; i++) {\n      loops++;\n      if (loops > 985000) {\n        console.log('Too many loops, exiting');\n        break;\n      }\n      if (i < 0) {\n        console.log('Not solvable?');\n        return false;\n      }\n\n      //?\n      if (!(i in this.boxes)) continue;\n\n      // Skip over 'default' boxes\n      if (this.boxes[i].classList.contains('default') && !this.moveForward) {\n        //console.log(`Loop: ${loops} - i: ${i} - moving to ${i - 2}`);\n        i -= 2;\n        this.clearAhead(i + 2);\n        continue;\n      }\n\n      await this.func2(i);\n      //this.moveForward = this.elSol(this.boxes[i]);\n\n      if (!this.moveForward) {\n        // Move back two spaces\n        //console.log(`Loop: ${loops} - i: ${i} - moving to ${i - 2}`);\n        i -= 2;\n        this.clearAhead(i + 2);\n      }\n    }\n\n    console.log(`Completed in ${loops} loops`);\n  }\n\n  func2(i, x) {\n    let self = this;\n    return new Promise(resolve =>\n      setTimeout(function() {\n        self.moveForward = self.elSol(self.boxes[i]);\n\n        resolve();\n      }, 1),\n    );\n  }\n\n  elSol(boxEl, x) {\n    //let boxEl = document.querySelector(\".row\"+i+\".col\"+j);\n\n    if (boxEl.classList.contains('default')) return true;\n\n    if (parseInt(boxEl.childNodes[0].value)) {\n      boxEl.childNodes[0].value++;\n      if (boxEl.childNodes[0].value > 9) {\n        boxEl.childNodes[0].value = '';\n        return false;\n      }\n    } else {\n      boxEl.childNodes[0].value = 1;\n    }\n\n    // When making array backtrack\n    // /maybe/ insteadof ++ store array of values treied for each index\n    // and randomly use one of them\n    // will prob help with creating puzzle and finding unique solution\n    while (\n      !this.sudoku.error.isValidStar(boxEl.classList) &&\n      boxEl.childNodes[0].value < 9\n    ) {\n      boxEl.childNodes[0].value++;\n    }\n\n    if (!this.sudoku.error.isValidStar(boxEl.classList)) {\n      boxEl.childNodes[0].value = '';\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  clearAhead(i) {\n    for (; i < 81; i++) {\n      let col = i % 9 + 1;\n      let row = Math.floor(i / 9) + 1;\n      let boxEl = document.querySelector('.row' + row + '.col' + col);\n\n      if (boxEl.classList.contains('default')) continue;\n\n      boxEl.childNodes[0].value = '';\n    }\n  }\n}\n\nexport default Solver;\n","// @format\n'use strict';\n\nimport Error from './errorCheck.js';\nimport ErrorArray from './errorCheckArray.js';\nimport Input from './input.js';\nimport Solver from './solver.js';\n\nclass Sudoku {\n  constructor() {\n    this.difficulty = false;\n\n    this.test = {};\n\n    this.currentValues = {};\n\n    this.drawGame();\n\n    this.error = new Error(this);\n    this.solver = new Solver(this);\n    this.input = new Input(this);\n  }\n\n  drawGame() {\n    // check difficulty\n    // create new puzzle\n    const puzzle = this.getPuzzle();\n\n    this.drawGrid();\n\n    // add to DOM\n    this.drawPuzzle(puzzle);\n  }\n\n  /**\n   *\n   * @description Add the divs to our grid\n   * @returns {undefined}\n   */\n  drawGrid() {\n    const puzzleWrapper = document.querySelector('.ninexnine_wrapper');\n\n    // Rows\n    for (let i = 1; i <= 9; i++) {\n      // Columns\n      for (let j = 1; j <= 9; j++) {\n        puzzleWrapper.innerHTML +=\n          '<div class=\"row' + i + ' col' + j + '\"></div>';\n      }\n    }\n  }\n\n  drawPuzzle(puzzle) {\n    let col, row;\n\n    for (let i = 0; i < 81; i++) {\n      col = i % 9;\n      row = Math.floor(i / 9);\n\n      const el = document.querySelector(\n        '.col' + (col + 1) + '.row' + (row + 1),\n      );\n      if (puzzle[i]) {\n        el.innerHTML = '<input type=\"text\" value=\"' + puzzle[i] + '\" disabled>';\n        el.classList.add('default');\n      } else {\n        el.innerHTML = '<input type=\"text\">';\n      }\n    }\n  }\n\n  async newPuzzle() {\n    const puzzleWrapper = document.querySelector('.ninexnine_wrapper');\n    const puzzle = this.createPuzzle();\n\n    puzzleWrapper.innerHTML = '';\n    this.drawGrid();\n\n    this.backSolvePuzzle(puzzle);\n\n    //this.drawPuzzle(puzzle);\n  }\n\n  createPuzzle() {\n    let p = [];\n    for (let i = 0; i < 81; i++) p[i] = 0;\n\n    p[0] = this.getRandomInt(p);\n    p[1] = this.getRandomInt(p);\n    p[2] = this.getRandomInt(p);\n\n    p[9] = this.getRandomInt(p);\n    p[10] = this.getRandomInt(p);\n    p[11] = this.getRandomInt(p);\n\n    p[18] = this.getRandomInt(p);\n    p[19] = this.getRandomInt(p);\n    p[20] = this.getRandomInt(p);\n\n    p[30] = this.getRandomInt(p.slice(30, 50));\n    p[31] = this.getRandomInt(p.slice(30, 50));\n    p[32] = this.getRandomInt(p.slice(30, 50));\n\n    p[39] = this.getRandomInt(p.slice(30, 50));\n    p[40] = this.getRandomInt(p.slice(30, 50));\n    p[41] = this.getRandomInt(p.slice(30, 50));\n\n    p[48] = this.getRandomInt(p.slice(30, 50));\n    p[49] = this.getRandomInt(p.slice(30, 50));\n    p[50] = this.getRandomInt(p.slice(30, 50));\n\n    p[60] = this.getRandomInt(p.slice(60, 80));\n    p[61] = this.getRandomInt(p.slice(60, 80));\n    p[62] = this.getRandomInt(p.slice(60, 80));\n\n    p[69] = this.getRandomInt(p.slice(60, 80));\n    p[70] = this.getRandomInt(p.slice(60, 80));\n    p[71] = this.getRandomInt(p.slice(60, 80));\n\n    p[78] = this.getRandomInt(p.slice(60, 80));\n    p[79] = this.getRandomInt(p.slice(60, 80));\n    p[80] = this.getRandomInt(p.slice(60, 80));\n\n    return p;\n  }\n\n  getRandomInt(p) {\n    let i;\n    do i = Math.floor(Math.random() * 9) + 1;\n    while (p.indexOf(i) != -1);\n    return i;\n  }\n\n  getPuzzle() {\n    //const p = [\n    //  5, 3, 0, 0, 7, 0, 0, 0, 0,\n    //  6, 0 ,0, 1, 9, 5, 0, 0, 0,\n    //  0, 9, 8, 0, 0, 0, 0, 6, 0,\n    //  8, 0, 0, 0, 6, 0, 0, 0, 3,\n    //  4, 0, 0, 8, 0, 3, 0, 0, 1,\n    //  7, 0, 0, 0, 2, 0, 0, 0, 6,\n    //  0, 6, 0, 0, 0, 0, 2, 8, 0,\n    //  0, 0, 0, 4, 1, 9, 0, 0, 5,\n    //  0, 0, 0, 0, 8, 0, 0, 7, 9\n    //];\n\n    //const p = [\n    //  7, 8, 9, 1, 2, 3, 4 ,5, 6,\n    //  3, 0, 0, 0, 4, 0, 0, 0, 8,\n    //  5, 0, 0, 0, 9, 0, 0, 0, 1,\n    //  8, 0, 0, 0, 3, 0, 0, 0, 4,\n    //  1, 2, 3, 4, 5, 6, 7, 8, 9,\n    //  6, 0, 0, 0, 7, 0, 0, 0, 2,\n    //  9, 0, 0, 0, 1, 0, 0, 0, 5,\n    //  2, 0, 0, 0, 6, 0, 0, 0, 7,\n    //  4, 5, 6, 7, 8, 9, 1, 2, 3\n    //];\n\n    //const p = [\n    //  6, 0, 0, 0, 0, 0, 0, 0, 3,\n    //  0, 0, 1, 0, 9, 0, 6, 0, 0,\n    //  0, 5, 8, 0, 7, 0, 2, 4, 0,\n    //  0, 0, 0, 7, 0, 1, 0, 0, 0,\n    //  0, 8, 6, 0, 0, 0, 5, 7, 0,\n    //  0, 0, 0, 6, 0, 9, 0, 0, 0,\n    //  0, 6, 4, 0, 1, 0, 8, 2, 0,\n    //  0, 0, 7, 0, 6, 0, 4, 0, 0,\n    //  8, 0, 0, 0, 0, 0, 0, 0, 6\n    //];\n\n    //const p = [\n    //  0, 0, 6, 3, 0, 0, 0, 0, 5,\n    //  0, 5, 0, 0, 4, 0, 0, 9, 0,\n    //  8, 0, 0, 0, 0, 9, 1, 0, 0,\n    //  3, 0, 0, 0, 0, 1, 4, 0, 0,\n    //  0, 6, 0, 0, 7, 0, 0, 2, 0,\n    //  0, 0, 7, 5, 0, 0, 0, 0, 8,\n    //  0, 0, 4, 9, 0, 0, 0, 0, 3,\n    //  0, 1, 0, 0, 3, 0, 0, 6, 0,\n    //  2, 0, 0, 0, 0, 8, 9, 0, 0\n    //];\n\n    //const p = [\n    //  0, 0, 0, 0, 0, 0, 0, 0, 0,\n    //  0, 0, 0, 0, 0, 3, 0, 8, 5,\n    //  0, 0, 1, 0, 2, 0, 0, 0, 0,\n    //  0, 0, 0, 5, 0, 7, 0, 0, 0,\n    //  0, 0, 4, 0, 0, 0, 1, 0, 0,\n    //  0, 9, 0, 0, 0, 0, 0, 0, 0,\n    //  5, 0, 0, 0, 0, 0, 0, 7, 3,\n    //  0, 0, 2, 0, 1, 0, 0, 0, 0,\n    //  0, 0, 0, 0, 4, 0, 0, 0, 9\n    //];\n\n    // prettier-ignore\n    const p = [\n7, 1, 0, 0, 0, 9, 0, 0, 6,\n0, 5, 0, 0, 0, 0, 2, 7, 0,\n0, 0, 2, 0, 7, 3, 0, 0, 1,\n0, 0, 0, 0, 2, 0, 1, 9, 0,\n0, 0, 9, 4, 0, 0, 7, 0, 3,\n4, 7, 0, 0, 0, 1, 6, 0, 0,\n0, 3, 0, 6, 0, 0, 0, 1, 0,\n6, 0, 0, 0, 0, 0, 0, 8, 2,\n2, 0, 7, 1, 8, 0, 0, 0, 0,\n];\n\n    return p;\n  }\n  /**\n   *\n   *\n   * @returns {undefined}\n   */\n  checkEverything() {\n    let isGood = true;\n\n    this.clearErrors();\n    if (!this.checkLine('row', 3)) isGood = false;\n    //if (!this.checkLine(\"col\", 5)) isGood = false;\n\n    //for (let i = 1; i < 10; i++) {\n    //  if (!this.checkSquare(i)) isGood = false;\n    //  if (!this.checkLine(\"row\", i)) isGood = false;\n    //  if (!this.checkLine(\"col\", i)) isGood = false;\n    //}\n\n    if (isGood) {\n      console.log('Sudoku puzzle complete!');\n    } else {\n      console.log('Problem in the puzzle');\n    }\n  }\n\n  /**\n   *\n   *\n   * @returns {undefined}\n   */\n  checkLine(rc, x) {\n    let values = [];\n    let classes;\n    let isGood = true;\n    const matches = document.querySelectorAll('.' + rc + x);\n\n    for (let el of matches) {\n      // Skip empty boxes\n      if (!el.childNodes[0].value) continue;\n\n      // If we have come across the value on this line previously\n      if (values.includes(el.childNodes[0].value)) {\n        // highlight this and previous value\n\n        el.classList.add('error');\n        document\n          .querySelector(this.test[el.childNodes[0].value])\n          .classList.add('error');\n        isGood = false;\n      } else {\n        values.push(el.childNodes[0].value);\n        //\n        classes = '.' + el.classList[0] + '.' + el.classList[1];\n        this.test[el.childNodes[0].value] = classes;\n      }\n    }\n\n    return isGood;\n  }\n\n  /**\n   *\n   * @description Get the starting column of a given square\n   *  E.g, 1 = 1, 2 = 4, 3 =  7, 4 = 1\n   * @returns int x\n   */\n  getStartingCol(i) {\n    let x;\n    switch (i % 3) {\n      case 1:\n        x = 1;\n        break;\n      case 2:\n        x = 4;\n        break;\n      case 0:\n        x = 7;\n        break;\n    }\n    return x;\n  }\n\n  /**\n   *\n   * @description Get the starting row of a given square\n   * @returns int y\n   */\n  getStartingRow(i) {\n    let y;\n    if (i < 4) {\n      y = 1;\n    } else if (i < 7) {\n      y = 4;\n    } else {\n      y = 7;\n    }\n    return y;\n  }\n\n  /**\n   *\n   *\n   * @returns {undefined}\n   */\n  checkSquare(i) {\n    let values = [];\n    let classes;\n    let isGood = true;\n    let x, y;\n\n    // Get starting col\n    switch (i % 3) {\n      case 1:\n        x = 1;\n        break;\n      case 2:\n        x = 4;\n        break;\n      case 0:\n        x = 7;\n        break;\n    }\n\n    // Get starting row\n    if (i < 4) {\n      y = 1;\n    } else if (i < 7) {\n      y = 4;\n    } else {\n      y = 7;\n    }\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        const el = document.querySelector('.col' + i + '.row' + j);\n        //console.log(\".col\"+i+\".row\"+j);\n        //console.log(\"X: \",i, \"Y: \", j);\n        //console.log(\".col\"+i+\".row\"+j, el.childNodes[0].value);\n        if (!el.childNodes[0].value) {\n          //isGood = false;\n          if (el.classList.contains('error')) {\n            el.classList.remove('error');\n          }\n          continue;\n        }\n\n        if (values.includes(el.childNodes[0].value)) {\n          if (!el.classList.contains('error')) {\n            el.classList.add('error');\n          }\n          document\n            .querySelector(this.test[el.childNodes[0].value])\n            .classList.add('error');\n          isGood = false;\n        } else if (el.childNodes[0].value) {\n          //if (el.classList.contains(\"error\")) {\n          //  el.classList.remove(\"error\");\n          //}\n          values.push(el.childNodes[0].value);\n\n          classes = '.' + el.classList[0] + '.' + el.classList[1];\n          this.test[el.childNodes[0].value] = classes;\n        }\n      }\n    }\n\n    return isGood;\n  }\n\n  getPossibleValues(x, y) {\n    // [TODO] finish this\n    console.log(x, y);\n    const el = document.querySelector('.' + y + '.' + x);\n    const value = el.childNodes[0].value;\n\n    console.log(value);\n  }\n\n  getSquareIndex(classList) {\n    const row = /row(\\d)/.exec(classList);\n    const col = /col(\\d)/.exec(classList);\n\n    const tempCol = Math.ceil(col[1] / 3);\n    const tempRow = (Math.ceil(row[1] / 3) - 1) * 3;\n    const square = tempRow + tempCol;\n\n    return square;\n  }\n}\n\nexport default Sudoku;\n\n//let checkel = document.getElementsByClassName(\"btn-check\")[0];\n//checkel.addEventListener(\"click\", check);\n//\n//function check() {\n//  sud.checkEverything();\n//}\n//\n//let clearel = document.getElementsByClassName(\"btn-clear\")[0];\n//clearel.addEventListener(\"click\", clear);\n//\n//function clear() {\n//  sud.clearErrors();\n//}\n"],"sourceRoot":""}